name: Build and push Docker image

on:
  push:
    branches: [ main ]
  pull_request:

env:
  REGISTRY: ghcr.io/Foxite
  IMAGE_NAME: fxdumpert
  BUILD_CONTEXT: .
  DOCKERFILE: Dockerfile
  GLUE_KEY_ALG: ES512
  GLUE_KEY_ID: fxdumpert

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    outputs:
      images: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - id: compute-version-code
        shell: bash
        run: echo "release-version=$(echo ${GITHUB_SHA:0:8})" >> $GITHUB_OUTPUT
        
      - name: Log in to the Container registry
        # Pin to a specific commit rather than a tag, which provides better protection against supply chain attacks.
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: ${{ env.BUILD_CONTEXT }}
          file: ${{ env.DOCKERFILE }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  trigger-update:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    steps:
      - name: Trigger update
        uses: Foxite/trigger-update@v1.0
        with:
          keyId: ${{ env.GLUE_KEY_ID }}
          algorithm: ${{ env.GLUE_KEY_ALG }}
          images: ${{ needs.build-and-push-image.outputs.images }}
          glueUrl: ${{ secrets.GLUE_URL }}
          privateKey: ${{ secrets.GLUE_KEY }}
